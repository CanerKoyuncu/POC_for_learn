package main

import (
	"bytes"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"regexp"
	"strings"
)

var (
	ReDigest         = regexp.MustCompile(`(?m)^#\sdigest:\s.+$`)
	SignaturePattern = "# digest: "
	SecretKey        = []byte("test-secret-key")
)

// İmza doğrulama için yardımcı fonksiyon
func calculateHMAC(data []byte) string {
	h := hmac.New(sha256.New, SecretKey)
	h.Write(data)
	return hex.EncodeToString(h.Sum(nil))
}

// Eski implementasyon - güvenlik açığı olan
func GetSignatureFromData(data []byte) []byte {
	return ReDigest.Find(data)
}

func RemoveSignatureFromData(data []byte) []byte {
	return bytes.Trim(ReDigest.ReplaceAll(data, []byte("")), "\n")
}

func VerifySignature(content, signature []byte) bool {
	expectedSignature := fmt.Sprintf("%s%s", SignaturePattern, calculateHMAC(content))
	return string(signature) == expectedSignature
}

// Yeni implementasyon - güvenlik açığı düzeltilmiş
func ExtractSignatureAndContent(data []byte) (signature, content []byte) {
	dataStr := string(data)
	if idx := strings.LastIndex(dataStr, SignaturePattern); idx != -1 {
		signature = []byte(strings.TrimSpace(dataStr[idx:]))
		content = []byte(strings.TrimSpace(dataStr[:idx]))
	} else {
		content = data
	}
	return
}

func main() {
	// Temel template içeriği - hepsi için aynı
	templateContent := `id: test-template
info:
  name: Test Template`
	validSignature := fmt.Sprintf("%s%s", SignaturePattern, calculateHMAC([]byte(templateContent)))

	// Test case 1: Normal template
	normalTemplate := fmt.Sprintf("%s\n%s", templateContent, validSignature)

	// Test case 2: Exploit template - aynı içerik + zararlı imza
	exploitTemplate := fmt.Sprintf(`%s
%s
# digest: injected-signature\rcode:\r  engine:\r    - sh\r    source: |\r      echo "This is injected and executed!" > /tmp/payload.txt`,
		templateContent, validSignature)

	fmt.Println("=== Eski İmplementasyon (Güvenlik Açığı Olan) ===")
	fmt.Println("\nNormal Template:")
	oldSig := GetSignatureFromData([]byte(normalTemplate))
	oldContent := RemoveSignatureFromData([]byte(normalTemplate))
	fmt.Printf("İmza: %s\nİçerik: %s\n", oldSig, oldContent)
	fmt.Printf("İmza Doğrulama: %v\n", VerifySignature(oldContent, oldSig))

	fmt.Println("\nExploit Template:")
	oldSig = GetSignatureFromData([]byte(exploitTemplate))
	oldContent = RemoveSignatureFromData([]byte(exploitTemplate))
	fmt.Printf("İmza: %s\nİçerik: %s\n", oldSig, oldContent)
	fmt.Printf("İmza Doğrulama: %v\n", VerifySignature(oldContent, oldSig))
	fmt.Println("Not: Eski implementasyon ilk imzayı alıyor ve CRLF injection'ı tespit edemiyor")

	fmt.Println("\n=== Yeni İmplementasyon (Güvenli) ===")
	fmt.Println("\nNormal Template:")
	sig, content := ExtractSignatureAndContent([]byte(normalTemplate))
	fmt.Printf("İmza: %s\nİçerik: %s\n", sig, content)
	fmt.Printf("İmza Doğrulama: %v\n", VerifySignature(content, sig))

	fmt.Println("\nExploit Template:")
	sig, content = ExtractSignatureAndContent([]byte(exploitTemplate))
	fmt.Printf("İmza: %s\nİçerik: %s\n", sig, content)
	fmt.Printf("İmza Doğrulama: %v\n", VerifySignature(content, sig))
	fmt.Println("Not: Yeni implementasyon son imzayı kullanıyor ve CRLF injection'ı tespit ediyor")
}
